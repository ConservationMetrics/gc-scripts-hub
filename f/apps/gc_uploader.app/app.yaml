summary: GC Uploader (Locus Map)
value:
  css:
    buttoncomponent:
      button:
        class: ''
        style: ''
      container:
        class: ''
        style: ''
    formcomponent:
      button:
        class: ''
        style: ''
      container:
        class: ''
        style: ''
    textcomponent:
      container:
        class: ''
        style: ''
      text:
        class: ''
        style: ''
  fullscreen: false
  grid:
    - '12':
        fixed: true
        fullHeight: false
        h: 2
        w: 12
        x: 0
        'y': 0
      '3':
        fixed: true
        fullHeight: false
        h: 2
        w: 6
        x: 0
        'y': 0
      id: header
      data:
        id: header
        type: containercomponent
        actions: []
        configuration: {}
        customCss:
          container:
            class: '!p-0'
            style: ''
        numberOfSubgrids: 1
    - '12':
        fixed: false
        fullHeight: false
        h: 1
        w: 6
        x: 3
        'y': 3
      '3':
        fixed: false
        fullHeight: false
        h: 1
        w: 1
        x: 1
        'y': 6
      id: formTitle
      data:
        id: formTitle
        type: textcomponent
        actions: []
        componentInput:
          type: templatev2
          connections: []
          eval: Upload Locus Map spatial data
          fieldType: template
        configuration:
          copyButton:
            type: static
            value: false
          disableNoText:
            type: static
            value: false
          style:
            type: static
            value: Body
          tooltip:
            type: static
            value: ''
        customCss:
          container:
            class: ''
            style: ''
          text:
            class: ''
            style: ''
        horizontalAlignment: center
        verticalAlignment: top
    - '12':
        fixed: false
        fullHeight: false
        h: 1
        w: 6
        x: 3
        'y': 4
      '3':
        fixed: false
        fullHeight: false
        h: 1
        w: 1
        x: 0
        'y': 7
      id: formHint
      data:
        id: formHint
        type: textcomponent
        actions: []
        componentInput:
          type: templatev2
          connections: []
          eval: 'Accepted formats: CSV, GPX, KML, KMZ, or ZIP (with attachments)'
          fieldType: template
        configuration:
          copyButton:
            type: static
            value: false
          disableNoText:
            type: static
            value: false
          style:
            type: static
            value: Body
          tooltip:
            type: static
            value: ''
        customCss:
          container:
            class: ''
            style: ''
          text:
            class: ''
            style: 'font-size: 0.6em!important;'
        horizontalAlignment: center
        verticalAlignment: center
    - '12':
        fixed: false
        fullHeight: false
        h: 4
        w: 6
        x: 3
        'y': 5
      '3':
        fixed: false
        fullHeight: false
        h: 4
        w: 3
        x: 0
        'y': 2
      id: selectFile
      data:
        id: selectFile
        type: fileinputcomponent
        actions: []
        configuration:
          acceptedFileTypes:
            type: static
            value:
              - text/csv
              - application/zip
              - application/gpx+xml
              - application/vnd.google-earth.kml+xml
              - application/vnd.google-earth.kmz
              - ''
            connections:
              - id: result
                componentId: selectFile
            expr: selectFile.result
          allowMultiple:
            type: static
            value: false
          disabled:
            type: static
            value: false
            connections: []
            expr: 'false'
          includeMimeType:
            type: static
            value: false
          submittedFileText:
            type: static
            value: Selected file
            connections: []
            expr: '"Selected file"'
          text:
            type: static
            value: Drag and drop files or click to select them
            connections: []
            expr: '"Drag and drop files or click to select them"'
        customCss:
          container:
            class: ''
            style: ''
        onFileChange:
          - bg_3
          - bg_1
    - '12':
        fixed: false
        fullHeight: false
        h: 1
        w: 2
        x: 5
        'y': 9
      '3':
        fixed: false
        fullHeight: false
        h: 1
        w: 1
        x: 0
        'y': 6
      id: uploadFile
      data:
        id: uploadFile
        type: buttoncomponent
        actions: []
        componentInput:
          type: runnable
          autoRefresh: false
          fields:
            tmp_dir:
              type: static
              value: /persistent-storage/tmp
              fieldType: string
            uploaded_file:
              type: evalv2
              value: null
              connections:
                - id: result
                  componentId: selectFile
              expr: selectFile.result
              fieldType: object
          fieldType: any
          recomputeOnInputChanged: false
          runnable:
            type: runnableByName
            name: Save data to disk
            inlineScript:
              content: '!inline save_data_to_disk.inline_script.py'
              lock: ''
              language: python3
              path: f/apps/gc_uploader/Save_data_to_disk
              schema:
                $schema: 'https://json-schema.org/draft/2020-12/schema'
                type: object
                properties:
                  tmp_dir:
                    type: string
                    description: ''
                    default: /persistent-storage/tmp
                    originalType: string
                  uploaded_file:
                    type: object
                    description: ''
                    default: null
                required:
                  - uploaded_file
        configuration:
          afterIcon:
            type: static
            value: ''
          beforeIcon:
            type: static
            value: ''
          color:
            type: static
            value: blue
          confirmationModal:
            type: oneOf
            configuration:
              confirmationModal:
                description:
                  type: static
                  value: Are you sure?
                confirmationText:
                  type: static
                  value: Confirm
                title:
                  type: static
                  value: Title
              none: {}
            selected: none
          disabled:
            type: evalv2
            value: false
            connections:
              - id: uploadButtonEnabled
                componentId: state
            expr: '!state.uploadButtonEnabled === true'
          fillContainer:
            type: static
            value: false
          label:
            type: static
            value: Upload File
          onError:
            type: oneOf
            configuration:
              close:
                id:
                  type: static
                  value: ''
              errorOverlay: {}
              gotoUrl:
                newTab:
                  type: static
                  value: true
                url:
                  type: static
                  value: ''
              open:
                id:
                  type: static
                  value: ''
              sendErrorToast:
                appendError:
                  type: static
                  value: true
                message:
                  type: static
                  value: An error occured
              setTab:
                setTab:
                  type: static
                  value: []
            selected: errorOverlay
          onSuccess:
            type: oneOf
            configuration:
              clearFiles:
                id:
                  type: static
                  value: ''
              close:
                id:
                  type: static
                  value: ''
              closeModal:
                modalId:
                  type: static
                  value: ''
              gotoUrl:
                newTab:
                  type: static
                  value: true
                url:
                  type: static
                  value: ''
              none: {}
              open:
                id:
                  type: static
                  value: ''
              openModal:
                modalId:
                  type: static
                  value: ''
              sendToast:
                message:
                  type: static
                  value: ''
              setTab:
                setTab:
                  type: static
                  value: []
            selected: none
          size:
            type: static
            value: xs
          triggerOnAppLoad:
            type: static
            value: false
        customCss:
          button:
            class: ''
            style: ''
          container:
            class: ''
            style: ''
        horizontalAlignment: center
        recomputeIds:
          - bg_0
          - bg_4
        verticalAlignment: center
    - '12':
        fixed: false
        fullHeight: false
        h: 1
        w: 6
        x: 3
        'y': 10
      '3':
        fixed: false
        fullHeight: false
        h: 1
        w: 1
        x: 2
        'y': 6
      id: resultMessage
      data:
        id: resultMessage
        type: textcomponent
        actions: []
        componentInput:
          type: runnable
          autoRefresh: true
          connections: []
          eval: ''
          expr: ''
          fields: {}
          fieldType: template
          hideRefreshButton: true
          recomputeOnInputChanged: true
          runnable:
            type: runnableByName
            name: Update result message
            inlineScript:
              content: '!inline update_result_message.inline_script.frontend.js'
              language: frontend
              path: f/apps/gc_uploader/Update_result_message
              refreshOn:
                - id: state
                  key: uploadSuccess
                - id: state
                  key: uploadProcessing
              suggestedRefreshOn: []
        configuration:
          copyButton:
            type: static
            value: false
          disableNoText:
            type: static
            value: true
          style:
            type: static
            value: Body
          tooltip:
            type: static
            value: ''
        customCss:
          container:
            class: ''
            style: ''
          text:
            class: ''
            style: ''
        horizontalAlignment: center
        verticalAlignment: top
  hiddenInlineScripts:
    - type: runnableByPath
      name: 'Locus Map: Import Data'
      autoRefresh: false
      fields:
        attachment_root:
          type: static
          value: /persistent-storage/datalake
          fieldType: string
        db:
          type: static
          value: '$res:f/frizzle/bcmdemo_db'
          fieldType: object
          format: resource-postgresql
        db_table_name:
          type: evalv2
          value: null
          connections:
            - id: result
              componentId: uploadFile
          expr: uploadFile.result.db_table_name
          fieldType: string
        delete_locusmap_export_file:
          type: static
          value: true
          fieldType: boolean
        locusmap_export_path:
          type: evalv2
          connections:
            - id: result
              componentId: uploadFile
          expr: uploadFile.result.file_path
          fieldType: string
      path: f/connectors/locusmap/locusmap
      recomputeIds:
        - bg_2
      recomputeOnInputChanged: false
      runType: script
      schema:
        $schema: 'https://json-schema.org/draft/2020-12/schema'
        type: object
        order:
          - locusmap_export_path
          - db
          - db_table_prefix
          - delete_locusmap_export_file
          - attachment_root
        properties:
          attachment_root:
            type: string
            description: >-
              A path where Locus Map attachments will be stored. Attachment
              files will be stored in the following directory schema: 
              `{attachment_root}/{db_table_name}/attachments/{filename}`
            default: /persistent-storage/datalake
            originalType: string
          db:
            type: object
            description: A database connection for storing tabular data.
            default: null
            format: resource-postgresql
          db_table_name:
            type: string
            description: The name of the database table where the form data will be stored.
            default: null
            originalType: string
            pattern: '^.{1,54}$'
          delete_locusmap_export_file:
            type: boolean
            description: Whether to delete the Locus Map export file after processing.
            default: false
          locusmap_export_path:
            type: string
            description: >-
              The path to the file exported from Locus Map, including the
              filename. This could be a GPX/KML/CSV file, or a ZIP file also
              containing attachments.
            originalType: string
        required:
          - db
          - db_table_name
          - locusmap_export_path
    - type: runnableByName
      name: Set state.uploadSuccess to false
      autoRefresh: true
      fields: {}
      inlineScript:
        content: '!inline set_state.uploadsuccess_to_false.inline_script.frontend.js'
        language: frontend
        path: f/apps/gc_uploader/Set_state.uploadSuccess_to_false
        suggestedRefreshOn:
          - id: state
            key: uploadSuccess
      recomputeIds: []
      recomputeOnInputChanged: true
    - type: runnableByName
      name: Toggle state.uploadSuccess
      autoRefresh: false
      fields: {}
      inlineScript:
        content: '!inline toggle_state.uploadsuccess.inline_script.frontend.js'
        language: frontend
        path: f/apps/gc_uploader/Toggle_state.uploadSuccess
        suggestedRefreshOn:
          - id: state
            key: uploadSuccess
          - id: state
            key: uploadProcessing
          - id: selectFile
            key: result
          - id: uploadFile
            key: result
      recomputeIds: []
      recomputeOnInputChanged: true
    - type: runnableByName
      name: Toggle state.uploadButtonEnabled
      autoRefresh: false
      fields: {}
      inlineScript:
        content: '!inline toggle_state.uploadbuttonenabled.inline_script.frontend.js'
        language: frontend
        path: f/apps/gc_uploader/Toggle_state.uploadButtonEnabled
        suggestedRefreshOn:
          - id: selectFile
            key: result
      recomputeIds: []
      recomputeOnInputChanged: true
    - type: runnableByName
      name: Set state.uploadProcessing to true;
      autoRefresh: false
      fields: {}
      inlineScript:
        content: '!inline set_state.uploadprocessing_to_true;.inline_script.frontend.js'
        language: frontend
        path: f/apps/gc_uploader/Set_state.uploadProcessing_to_true;
        suggestedRefreshOn:
          - id: state
            key: uploadProcessing
      recomputeIds: []
      recomputeOnInputChanged: true
  hideLegacyTopBar: true
  mobileViewOnSmallerScreens: false
  norefreshbar: false
  subgrids:
    header-0:
      - '12':
          fixed: false
          fullHeight: false
          h: 1
          w: 6
          x: 0
          'y': 0
        '3':
          fixed: false
          fullHeight: false
          h: 1
          w: 6
          x: 0
          'y': 0
        id: title
        data:
          id: title
          type: textcomponent
          actions: []
          componentInput:
            type: templatev2
            connections: []
            eval: Guardian Connector Uploader (Locus Maps)
            fieldType: template
          configuration:
            copyButton:
              type: static
              value: false
            disableNoText:
              type: static
              value: true
              fieldType: boolean
            style:
              type: static
              value: Body
            tooltip:
              type: evalv2
              value: ''
              connections:
                - id: author
                  componentId: ctx
              expr: '`Author: ${ctx.author}`'
              fieldType: text
          customCss:
            container:
              class: ''
              style: ''
            text:
              class: text-xl font-semibold whitespace-nowrap truncate
              style: ''
          horizontalAlignment: left
          verticalAlignment: center
      - '12':
          fixed: false
          fullHeight: false
          h: 1
          w: 6
          x: 6
          'y': 0
        '3':
          fixed: false
          fullHeight: false
          h: 1
          w: 3
          x: 0
          'y': 1
        id: recomputeall
        data:
          id: recomputeall
          type: recomputeallcomponent
          actions: []
          configuration: {}
          customCss:
            container:
              class: ''
              style: ''
          horizontalAlignment: right
          menuItems: []
          verticalAlignment: center
  theme:
    type: path
    path: f/app_themes/theme_0
  unusedInlineScripts: []
policy:
  execution_mode: publisher
  s3_inputs: []
  triggerables_v2:
    'bg_0:script/f/connectors/locusmap/locusmap':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs:
        attachment_root: /frizzle-persistent-storage/datalake
        db: '$res:f/frizzle/bcmdemo_db'
        delete_locusmap_export_file: true
    'bg_1:rawscript/75680a5e96c31082b2eac6745fda4454fa917497f23e5150a445949265d92dd9':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs: {}
    'bg_2:rawscript/a99b468b7d6ddf671b98f7f1ea07bbd2aa4d482867330cbc148607741e70f012':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs: {}
    'bg_3:rawscript/a6924af5d1db560649ae80f607042a966547ec52c890170adb4ed6028c61e85a':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs: {}
    'bg_4:rawscript/12150030335dc7872bb196b084257012f06f489e64aa911bd85a0cf7fae87fdf':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs: {}
    'resultMessage:rawscript/72c57efb22b5201ca42e05750e728495cced21917f6f05b98dee8cabd63096a0':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs: {}
    'uploadFile:rawscript/f21269cc6d4633807fb9054fb4bf5fe724f79e0e130aafed5351873b882c0efb':
      allow_user_resources: []
      one_of_inputs: {}
      static_inputs:
        tmp_dir: /persistent-storage/tmp
